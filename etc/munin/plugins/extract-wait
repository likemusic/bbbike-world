#!/usr/local/bin/perl
# Copyright (c) May 2018 Wolfram Schneider, https://bbbike.org
#
# usage: /etc/munin/plugins/extract-wait [ config ]
#
# get documentation with: perldoc /path/to/script

use Getopt::Long;
use Data::Dumper;
use File::stat;
use IO::File;

use strict;
use warnings;

=head1 NAME

extract-wait  - Plugin to monitor running extract wait time in seconds

=head1 ABOUT

[...]

=head1 USAGE

[...]

=head1 CONFIGURATION

Configuration parameters for /etc/munin/plugin-conf.d/munin-node
if you need to override the defaults below:

 [extract-wait]
   env.wait_warnings - Generate a warning if average wait time goes above this level 
   env.wait_critical - Generate a critical if average wait time goes above this level

=cut

########################################################################
# init
#
my $debug = 0;
my $help  = 0;

# time in minutes instead seconds: 60 -> 1min
my $minutes = 60;

my $extract_dir;
my $pro = "";
my ( $wait_warning, $wait_critical );

sub init {
    my $arg = shift;

    $ENV{PATH} = '/bin:/usr/bin';

    if ( $0 =~ /-pro$/ ) {
        $extract_dir = "/var/cache/extract-pro";
    }
    else {
        $extract_dir = "/var/cache/extract";
    }

    $wait_warning  = int( 400 / $minutes );
    $wait_critical = int( 3600 / $minutes );
}

sub usage {
    <<EOF;
usage: $0 [ options ] config

--debug=0..2                    default: $debug
--extract_dir=/path/to/dir      default: $extract_dir
EOF
}

sub config_wait {

    <<EOF;
graph_title Extracts wait time $pro
graph_vlabel Extracts wait time $pro
graph_category extract
graph_info Waiting extract time $pro
graph_period minute
wait_average.label Waiting average time $pro
wait_average.min 0
wait_average.warning $wait_warning
wait_average.critical $wait_critical
wait_min.label Waiting min time $pro
wait_min.min 0
wait_min.warning $wait_warning
wait_min.critical $wait_critical
wait_max.label Waiting max time $pro
wait_max.min 0
wait_max.warning $wait_warning
wait_max.critical $wait_critical
wait_median.label Waiting median time $pro
wait_median.min 0
wait_median.warning $wait_warning
wait_median.critical $wait_critical
EOF
}

sub wait_time {
    my %args = @_;

    my $extract_dir           = $args{'extract_dir'};
    my $extract_dir_confirmed = "$extract_dir/confirmed";

    my $time  = time();
    my @files = glob("$extract_dir_confirmed/*.json");
    my @mtime = ();

    foreach my $file (@files) {
        my $st = stat($file);
        if ( !$st ) {
            warn "ignore $file, gone\n" if $debug >= 1;
            next;
        }

        push @mtime, $st->mtime;
    }

    print "wait_average.value @{[ wait_average($time, @mtime) ]}\n";
    print "wait_min.value @{[ wait_min($time, @mtime) ]}\n";
    print "wait_max.value @{[ wait_max($time, @mtime) ]}\n";
    print "wait_median.value @{[ wait_median($time, @mtime) ]}\n";
}

sub wait_average {
    my $time  = shift;
    my @mtime = @_;

    # nothing to do
    if ( !@mtime ) {
        return 0;
    }

    my $res;
    foreach my $m (@mtime) {
        $res += ( $time - $m );
    }

    return $res / ( scalar @mtime ) / $minutes;
}

sub wait_min {
    my $time  = shift;
    my @mtime = @_;

    # nothing to do
    if ( !@mtime ) {
        return 0;
    }

    my @res = reverse sort { $a <=> $b } @mtime;
    return ( $time - $res[0] ) / $minutes;
}

sub wait_max {
    my $time  = shift;
    my @mtime = @_;

    # nothing to do
    if ( !@mtime ) {
        return 0;
    }

    my @res = reverse sort { $a <=> $b } @mtime;
    return ( $time - $res[-1] ) / $minutes;
}

sub wait_median {
    my $time  = shift;
    my @mtime = @_;

    # nothing to do
    if ( !@mtime ) {
        return 0;
    }

    my @res = reverse sort { $a <=> $b } @mtime;
    return ( $time - $res[ ( ( scalar @mtime ) + 1 ) / 2 - 1 ] ) / $minutes;
}

#############################################
# main
#

&init;
GetOptions(
    "debug=i"       => \$debug,
    "extract-dir=s" => \$extract_dir,
    "help"          => \$help,
) or die usage;

die usage if $help;

if ( defined $ARGV[0] && $ARGV[0] eq 'config' ) {
    print &config_wait;
}
else {
    &wait_time( 'extract_dir' => $extract_dir );
}

# EOF
