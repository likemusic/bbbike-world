#!/usr/local/bin/bash
# Copyright (c) 2009-2017 Wolfram Schneider, https://bbbike.org
#
# pbf2osm - convert PBF format to OSM XML

PATH=/usr/local/bin:/bin:/bin:/usr/bin; export PATH
set -e

: ${MULTI_CPU="YES"}
# output format
format="$1"

dirname=$(dirname $0)
compress=""
osm2bbbike=$dirname/osm2bbbike
osm2garmin=$dirname/osm2garmin
osm2png=$dirname/osm2png
osm2svg=$dirname/osm2svg
osm2shape=$dirname/osm2shape
osm2osmand=$dirname/osm2osmand
osm2navit=$dirname/osm2navit
osm2mapsforge=$dirname/osm2mapsforge
osm2mapsme=$dirname/osm2mapsme
: ${osm2o5m="osmconvert"}
: ${osm2o5m_opt="--fake-version"}
: ${osmium_convert="osmium_convert"}
osmium_convert_opt="-f pbf -t opl"

# max. file size in KB
# larger value for special garmin format
if [ "$format" = "--garmin-onroad" -o "$format" = "--garmin-onroad-ascii" ]; then
    : ${max_file_size_garmin=9950000}
fi

# use max. configured CPUs
if which pbzip2 >/dev/null 2>&1; then
    bzip2="$bzip2 -p$($(dirname $0)/ncpu)"
fi

: ${max_file_size_bbbike=90000}
: ${max_file_size_garmin=2950000}
: ${max_file_size_mapsforge=666000}
: ${max_file_size_osmand=666000}
: ${max_file_size_shape=866000}
: ${max_file_size_mapsme=966000}
: ${max_file_size_maperitive=90000}

: ${pbf2osm_max_cpu_time=7200}

xz=`which xz 2>/dev/null | head -n 1`
xz_opt=-1
gzip=gzip
bzip2=bzip2

# run on hardware with more than one CPU
if [ "$MULTI_CPU" = "YES" ]; then
     gzip=`which pigz gzip 2>/dev/null | head -n 1`
     bzip2=`which pbzip2 bzip2 2>/dev/null | head -n 1`

    if which pixz >/dev/null 2>&1; then
       xz="pixz -t"
       # use max. configured CPUs
       xz_opt="$xz_opt -p$($(dirname $0)/ncpu)"
    fi

else
    # garmin
    : ${osm2xxx_max_jobs="1"}
fi


usage () {
   echo "$@"
   cat <<EOF
usage [ option ] file.osm.pbf

--osm --gzip --bzip2 --xz

--osmosis --osmosis-gzip --osmosis-bzip2 --osmosis-xz
--o5m --o5m-gzip --o5m-bzip2 --o5m-xz
--csv --csv-gzip --csv-bzip2 --csv-xz
--opl --opl-gzip --opl-bzip2 --opl-xz

--shape
--osmand
--navit
--mapsforge-osm
--bbbike-perltk

--garmin-osm --garmin-osm-ascii --garmin-cycle --garmin-cycle-ascii
--garmin-leisure --garmin-leisure-ascii --garmin-bbbike --garmin-bbbike-ascii --garmin-srtm
--garmin-onroad --garmin-onroad-ascii --garmin-openfietslite --garmin-openfietslite-ascii
--garmin-oseam --garmin-oseam-ascii --garmin-opentopo --garmin-opentopo-ascii
--svg-google --svg-hiking --svg-osm --svg-urbanight --svg-wireframe --svg-cadastre
--png-google --png-hiking --png-osm --png-urbanight --png-wireframe --png-cadastre

--mapsme-osm

EOF

   exit 1
}

case $format in
    # default - convert to osm
    --osm)    shift; compress="";;

    # use old osmosis tool to conver to osm
    --osmosis)    shift; compress=cat;;

    # single core, more than one *.pbf files at once
    --gzip )  shift; compress=gzip;  pbf2osm_max_cpu_time=10800;;
    --bzip2 ) shift; compress=bzip2; pbf2osm_max_cpu_time=36000 ;;
    --xz )    shift; compress=xz; pbf2osm_max_cpu_time=10800 ;;

    --o5m ) 	  shift; compress=o5m ;;
    --o5m-gzip )  shift; compress=o5m-gzip ;;
    --o5m-bzip2 ) shift; compress=o5m-bzip2 ;;
    --o5m-xz )    shift; compress=o5m-xz ;;

    --csv ) 	  shift; compress=csv ;;
    --csv-gzip )  shift; compress=csv-gzip ;;
    --csv-bzip2 ) shift; compress=csv-bzip2 ;;
    --csv-xz )    shift; compress=csv-xz ;;

    --opl )       shift; compress=opl ;;
    --opl-gzip )  shift; compress=opl-gzip ;;
    --opl-bzip2 ) shift; compress=opl-bzip2 ;;
    --opl-xz )    shift; compress=opl-xz ;;

    --shape | --shp | --shapefile ) shift; compress=shape ;;
    --osmand | --obf ) 		    shift; compress=osmand ;;
    --navit ) 			    shift; compress=navit ;;

    --garmin-osm | --garmin-osm-ascii | --garmin-cycle | --garmin-cycle-ascii | --garmin-leisure | --garmin-leisure-ascii |\
    --garmin-bbbike | --garmin-bbbike-ascii | --garmin-onroad | --garmin-onroad-ascii | --garmin-openfietslite | \
	--garmin-openfietslite-ascii | --garmin-srtm | --garmin-oseam | --garmin-oseam-ascii | \
	--garmin-opentopo | --garmin-opentopo-ascii )
        garmin_style=$(echo $1 | perl -npe 's,^\-+[^\-]+-',,); shift; compress=garmin ;;
	--bbbike-perltk ) bbbike_style=perltk; shift; compress=bbbike ;;
    --svg-google | --svg-hiking | --svg-osm | --svg-urbanight | --svg-wireframe | --svg-cadastre ) svg_style=$(echo $1 | perl -npe 's,.*-,,'); shift; compress=svg ;;
    --png-google | --png-hiking | --png-osm | --png-urbanight | --png-wireframe | --png-cadastre ) png_style=$(echo $1 | perl -npe 's,.*-,,'); shift; compress=png ;;

    --mapsforge-osm | --mapsforge ) shift; compress=mapsforge; mapsforge_style=osm; pbf2osm_max_cpu_time=28000 ;;
    
    --mapsme-osm ) shift; compress=mapsme; mapsme_style=osm ;;

    -* ) usage "unknown option '$1'" ;;
esac

file="$1"
city="$2"

if ! [ -f "$file" ]; then
    usage "file does not exists: $file"
fi

# bail out after n CPU seconds across all CPUs.
# Note: this is user+sys time, not the real time
ulimit -t $pbf2osm_max_cpu_time

# run in quiet mode
global_opt=-q

osm2osm () {
    compressionMethod=$1
    shift
    case $compressionMethod in
        gzip ) ext=.gz ;;
        bzip2 ) ext=.bz2 ;;
        * ) echo "unknown compress $compressionMethod"; exit 2;;
    esac

    args=""
    for f
    do
        ff=`echo $f | sed "s/\.pbf$/$ext.tmp/"`
        args="$args --read-pbf-fast $f --write-xml $ff compressionMethod=$compressionMethod"
    done


    if osmosis $global_opt $args
    then
        for f
        do
            ff=`echo $f | sed "s/\.pbf$/$ext/"`
            mv -f $ff.tmp $ff
            chmod 664 $ff
        done
    else
        echo "File $@ failed"
        exit 2
    fi
}

size=$(du -ks -L "$file" | awk '{ print $1}')
case $compress in
    bbbike )
	if [ $size -gt $max_file_size_bbbike ]; then
	  usage "file '$file' size to big: $size > $max_file_size_bbbike"
	fi
	;;
    garmin | navit )
	if [ $size -gt $max_file_size_garmin ]; then
	  usage "file '$file' size to big: $size > $max_file_size_garmin"
	fi
	;;
    png | svg )
	if [ $size -gt $max_file_size_maperitive ]; then
	  usage "file '$file' size to big: $size > $max_file_size_maperitive"
	fi
	;;
    osmand )
	if [ $size -gt $max_file_size_osmand ]; then
	  usage "file '$file' size to big: $size > $max_file_size_osmand"
	fi
	;;
    mapsforge )
	if [ $size -gt $max_file_size_mapsforge ]; then
	  usage "file '$file' size to big: $size > $max_file_size_mapsforge"
	fi
	;;
    mapsme )
	if [ $size -gt $max_file_size_mapsme ]; then
	  usage "file '$file' size to big: $size > $max_file_size_mapsme"
	fi
	;;
    shape)
	if [ $size -gt $max_file_size_shape ]; then
	  usage "file '$file' size to big: $size > $max_file_size_shape"
	fi
	;;
    * ) ;;
esac


# fail if the pipe failed, bash only
case $compress in
    osmosis-* | *gzip | *bzip2 | xz | o5m-* | csv-* | opl-* ) set -o pipefail ;;
esac


f=`basename $file .pbf`
dir=`dirname $file`
tmp=$(mktemp $file.XXXXXXXX.tmp)
chmod 644 $tmp

# cleanup after signal
trap 'rm -f $tmp' 0 1 2 15

case $compress in
      "") $osm2o5m $osm2o5m_opt "$file" ;;
    cat ) osmosis $global_opt --read-pbf-fast "$file" --write-xml /dev/stdout ;;

    # legacy osmosis
    osmosis-bzip2 ) osmosis $global_opt --read-pbf-fast "$file" --write-xml /dev/stdout | $bzip2 > $tmp && mv -f $tmp $dir/$f.bz2 ;;
    osmosis-gzip )  osmosis $global_opt --read-pbf-fast "$file" --write-xml /dev/stdout | $gzip  > $tmp && mv -f $tmp $dir/$f.gz ;;
    osmosis-xz )    osmosis $global_opt --read-pbf-fast "$file" --write-xml /dev/stdout | $xz $xz_opt > $tmp && mv -f $tmp $dir/$f.xz ;;

    # compression
    gzip )  $osm2o5m $osm2o5m_opt "$file" | $gzip  > $tmp && mv -f $tmp $dir/$f.gz ;;
    bzip2 ) $osm2o5m $osm2o5m_opt "$file" | $bzip2 > $tmp && mv -f $tmp $dir/$f.bz2 ;;
    xz )    $osm2o5m $osm2o5m_opt "$file" | $xz $xz_opt > $tmp && mv -f $tmp $dir/$f.xz ;;

    # o5m format
    o5m )       $osm2o5m $osm2o5m_opt --out-o5m "$file" ;;
    o5m-gzip )  $osm2o5m $osm2o5m_opt --out-o5m "$file" | $gzip  > $tmp && mv -f $tmp $dir/$f.o5m.gz ;;
    o5m-bzip2 ) $osm2o5m $osm2o5m_opt --out-o5m "$file" | $bzip2 > $tmp && mv -f $tmp $dir/$f.o5m.bz2 ;;
    o5m-xz )    $osm2o5m  $osm2o5m_opt --out-o5m "$file"     | $xz $xz_opt > $tmp && mv -f $tmp $dir/$f.o5m.xz ;;

    # CSV format
    csv )       $osm2o5m $osm2o5m_opt --out-csv "$file" ;;
    csv-gzip )  $osm2o5m $osm2o5m_opt --out-csv "$file" | $gzip  > $tmp && mv -f $tmp $dir/$f.csv.gz ;;
    csv-bzip2 ) $osm2o5m $osm2o5m_opt --out-csv "$file" | $bzip2 > $tmp && mv -f $tmp $dir/$f.csv.bz2 ;;
    csv-xz )    $osm2o5m $osm2o5m_opt --out-csv "$file" | $xz $xz_opt > $tmp && mv -f $tmp $dir/$f.csv.xz ;;

    # OPL format
    opl )       $osmium_convert $osmium_convert_opt "$file" ;;
    opl-gzip )  $osmium_convert $osmium_convert_opt "$file" | $gzip  > $tmp && mv -f $tmp $dir/$f.opl.gz ;;
    opl-bzip2 ) $osmium_convert $osmium_convert_opt "$file" | $bzip2 > $tmp && mv -f $tmp $dir/$f.opl.bz2 ;;
    opl-xz )    $osmium_convert $osmium_convert_opt "$file" | $xz -1 > $tmp && mv -f $tmp $dir/$f.opl.xz ;;

    # other formats
    bbbike ) $osm2bbbike "$file" "$bbbike_style" "$city" ;;
    garmin ) $osm2garmin "$file" "$garmin_style" "$city" ;;
    png )    $osm2png    "$file" "$png_style" "$city" ;;
    svg )    $osm2svg    "$file" "$svg_style" "$city" ;;
    shape )  $osm2shape  "$file" "$city" ;;
    osmand ) $osm2osmand "$file" "$city" ;;
    mapsme ) $osm2mapsme   "$file" "$mapsme_style" "$city" ;;
    navit )  $osm2navit  "$file" "$city" ;;
    mapsforge ) $osm2mapsforge "$file" "$mapsforge_style" "$city" ;;

    * ) echo >& 2 "Oops, unknown '$compress'"; exit 2 ;;
esac
